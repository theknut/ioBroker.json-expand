{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nimport Json2iob from \"./lib/json2iob\";\n\ntype customOptions = {\n    rootObjectId: string; // root object id where the state should be expanded into\n    channelName?: string; //set name of the root channel\n    expandNow: boolean;\n};\n\nclass JsonExpand extends utils.Adapter {\n    json2iob: any;\n    subscribedStates: Array<string>;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"json-expand\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        this.on(\"objectChange\", this.onObjectChange.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n\n        this.json2iob = new Json2iob(this);\n        this.subscribedStates = new Array<string>();\n\n        /*\n            override functions which are used by json2iob\n            and replace them by functions used for foreign states\n        */\n        this.setStateAsync = this.overrideSetStateAsync;\n        this.extendObjectAsync = this.overrideExtendObjectAsync;\n        this.setObjectNotExistsAsync = this.overrideSetObjectNotExistsAsync;\n        this.delObjectAsync = this.overrideDelObjectAsync;\n    }\n\n    private async overrideSetStateAsync(\n        id: string,\n        state: ioBroker.State | ioBroker.StateValue | ioBroker.SettableState,\n        ack?: boolean,\n    ): ioBroker.SetStatePromise {\n        this.log.silly(`setForeignStateAsync(${id}, ${JSON.stringify(state)}, ${ack})`);\n        return await this.setForeignStateAsync(id, state, ack);\n    }\n\n    private async overrideExtendObjectAsync(\n        id: string,\n        objPart: ioBroker.PartialObject,\n        options?: ioBroker.ExtendObjectOptions,\n    ): ioBroker.SetObjectPromise {\n        this.log.silly(`extendForeignObjectAsync(${id}, ${JSON.stringify(objPart)}, ${JSON.stringify(options)})`);\n        return await this.extendForeignObjectAsync(id, objPart, options);\n    }\n\n    private async overrideSetObjectNotExistsAsync<T extends string>(\n        id: T,\n        obj: ioBroker.SettableObject<ioBroker.ObjectIdToObjectType<T, \"write\">>,\n    ): ioBroker.SetObjectPromise {\n        this.log.silly(`setForeignObjectNotExistsAsync(${id}, ${JSON.stringify(obj)})`);\n        return await this.setForeignObjectNotExistsAsync(id, obj);\n    }\n\n    private async overrideDelObjectAsync(id: string, options?: ioBroker.DelObjectOptions): Promise<void> {\n        this.log.silly(`delForeignObjectAsync(${id}, ${JSON.stringify(options)})`);\n        await this.delForeignObjectAsync(id, options);\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.log.debug(`Booting '${this.name}'...`);\n\n        await this.subscribeForeignObjectsAsync(\"*\");\n        await this.subscribeStatesWithCustomEnabled(this.subscribedStates);\n\n        this.log.debug(`Booting '${this.name}' finished`);\n    }\n\n    private async subscribeStatesWithCustomEnabled(subscribedStates: Array<string>): Promise<void> {\n        const view = await this.getObjectViewAsync(\"system\", \"custom\", {});\n        for (const row in view.rows) {\n            const id = view.rows[row].id;\n            await this.handleSubscribeStateAsync(id, subscribedStates);\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed object changes\n     */\n    private async onObjectChange(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n        const customObject = this.getCustomObject(obj);\n        await this.handleOnObjectChangeAsync(id, customObject, this.subscribedStates);\n    }\n\n    private getCustomObject(obj: ioBroker.Object | null | undefined): customOptions | undefined {\n        return obj?.common?.custom?.[this.namespace];\n    }\n\n    private async handleOnObjectChangeAsync(\n        id: string,\n        options: customOptions | undefined,\n        subscribedStates: Array<string>,\n    ): Promise<void> {\n        if (options === undefined && subscribedStates.includes(id)) {\n            this.log.info(`Disabled expansion of state '${id}'`);\n            await this.handleUnsubscribeStateAsync(id, subscribedStates);\n        } else if (options !== undefined) {\n            this.log.info(`Enabled expansion of state '${id}'`);\n            if (options?.expandNow == true) {\n                const state = await this.getForeignStateAsync(id);\n                this.log.debug(\"Expand \" + state?.val);\n                await this.expandValueAsync(state?.val, options);\n            }\n\n            await this.handleSubscribeStateAsync(id, subscribedStates);\n        }\n    }\n\n    private async handleSubscribeStateAsync(id: string, subscribedStates: Array<string>): Promise<boolean> {\n        if (subscribedStates.includes(id)) {\n            this.log.debug(`Already subscribed to '${id}' state changes`);\n            return true;\n        }\n\n        this.log.debug(`Subscribe to '${id}' state changes`);\n        await this.subscribeForeignStatesAsync(id);\n\n        subscribedStates.push(id);\n        if (this.log.level == \"debug\") {\n            this.log.debug(`handleSubscribeStateAsync subscribedStates: ${JSON.stringify(subscribedStates)}`);\n        }\n        return true;\n    }\n\n    private async handleUnsubscribeStateAsync(id: string, subscribedStates: Array<string>): Promise<boolean> {\n        if (!subscribedStates.includes(id)) {\n            this.log.debug(`Not subscribed to '${id}' state changes`);\n            return true;\n        }\n\n        this.log.debug(`Unsubscribe from '${id}' state changes`);\n        await this.unsubscribeForeignStatesAsync(id);\n\n        subscribedStates.splice(\n            subscribedStates.findIndex((item) => item == id),\n            1,\n        );\n\n        if (this.log.level == \"debug\") {\n            this.log.debug(`handleUnsubscribeStateAsync subscribedStates: ${JSON.stringify(subscribedStates)}`);\n        }\n\n        return true;\n    }\n\n    private async expandValueAsync(value: any, options: customOptions): Promise<void> {\n        const json = this.maybeConvert(value);\n        this.log.debug(`Expanding into state '${options.rootObjectId}.${options.channelName}'`);\n        this.setForeignObjectNotExistsAsync(`${options.rootObjectId}.${options.channelName}`, {\n            type: \"channel\",\n            common: {\n                name: options.channelName || \"\",\n            },\n            native: {},\n        });\n        await this.json2iob.parse(options.rootObjectId + \".\" + options.channelName, json, options);\n    }\n\n    private maybeConvert(value: any): object | undefined {\n        if (value === undefined || value == null) {\n            return undefined;\n        }\n        if (typeof value === \"object\") {\n            return value;\n        } else if (\n            (value[0] === \"{\" && value[value.length - 1] === \"}\") ||\n            (value[0] === \"[\" && value[value.length - 1] === \"]\")\n        ) {\n            return JSON.parse(value);\n        }\n        return value;\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        await this.handleOnStateChangeAsync(id, state?.val);\n    }\n\n    private async handleOnStateChangeAsync(id: string, value: any): Promise<void> {\n        if (!value) {\n            return;\n        }\n\n        const customObject = this.getCustomObject(await this.getForeignObjectAsync(id));\n        if (!customObject) {\n            return;\n        }\n\n        await this.expandValueAsync(value, customObject);\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new JsonExpand(options);\n} else {\n    // otherwise start the instance directly\n    (() => new JsonExpand())();\n}\n"],
  "mappings": "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",
  "names": ["Json2iob"]
}
